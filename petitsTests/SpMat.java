/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package petitsTests;

import JamaPlus.*;
import JamaPlus.SparseSVD.SparseSVDException;
import JamaPlus.util.*;

/**
 *
 * @author Bernard
 */
public class SpMat {
  final private static double EPS = Machine.eps();
  private static double EPS1;

  static public void dumpSpMat(SparseMatrix spmat) {
    for (int i = 0; i<spmat.getRowDimension(); i++) {
      System.out.println();
      for (int j = 0; j<spmat.getColumnDimension(); j++)
        System.out.print(spmat.get(i, j)+"  ");
    }
    System.out.println();
  }

  public enum NomMatrice {
    MAN1, MAN2, MAN3, GALL3, GALL5, NEUMANN, CLEMENT, CONDEX, DORR, FRANK, 
    KAHAN, PARTER, RANDSVD1, RANDSVD2
  }

  static public Matrix exemple(NomMatrice nm) {
    Matrix mat;
    switch (nm) {
      case MAN1:
        return new Matrix(new double[][]{
                  {1, 2, 3, 4},
                  {2, 3, 4, -10},
                  {10, 11, -20, 12},
                  {20, 21, 22, 100},
                  {100, 101, 102, -3},
                  {-5, 3, 15, -25}
                });
      case MAN2:
        mat = new Matrix(new double[10][8]);
        mat.set(1, 1, 1);
        mat.set(5, 1, 1);
        mat.set(0, 3, 1);
        mat.set(2, 6, 1);
        mat.set(6, 7, 1);
        mat.set(8, 7, 1);
        mat.set(9, 7, 1);
        return mat;
      case MAN3:
        mat = new Matrix(new double[10][8]);
        mat.set(1, 1, 0.9157);
        mat.set(5, 1, 0.9595);
        mat.set(0, 3, 0.4218);
        mat.set(2, 6, 0.7922);
        mat.set(6, 7, 0.6557);
        mat.set(8, 7, 0.0357);
        mat.set(9, 7, 0.8491);
        return mat;
      case GALL3:
        return new Matrix(new double[][]{
                  {-1.49000000000000e+002, 5.37000000000000e+002, -2.70000000000000e+001},
                  {-5.00000000000000e+001, 1.80000000000000e+002, -9.00000000000000e+000},
                  {-1.54000000000000e+002, 5.46000000000000e+002, -2.50000000000000e+001},});
      case GALL5:
        return new Matrix(new double[][]{
                  {-9.00000000000000e+000, 7.00000000000000e+001, -5.75000000000000e+002, 3.89100000000000e+003, 1.02400000000000e+003},
                  {1.10000000000000e+001, -6.90000000000000e+001, 5.75000000000000e+002, -3.89100000000000e+003, -1.02400000000000e+003},
                  {-2.10000000000000e+001, 1.41000000000000e+002, -1.14900000000000e+003, 7.78200000000000e+003, 2.04800000000000e+003},
                  {6.30000000000000e+001, -4.21000000000000e+002, 3.45100000000000e+003, -2.33450000000000e+004, -6.14400000000000e+003},
                  {-2.52000000000000e+002, 1.68400000000000e+003, -1.38010000000000e+004, 9.33650000000000e+004, 2.45720000000000e+004},});
      case NEUMANN:
        return new Matrix(new double[][]{
                  {4.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {-2.00000000000000e+000, 4.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, -1.00000000000000e+000, 4.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {-2.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 4.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000, 4.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 4.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 4.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, -2.00000000000000e+000, 4.00000000000000e+000, -2.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 0.00000000000000e+000, -1.00000000000000e+000, 4.00000000000000e+000},});
      case CLEMENT:
        return new Matrix(new double[][]{
                  {0.00000000000000e+000, 7.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {1.00000000000000e+000, 0.00000000000000e+000, 6.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 2.00000000000000e+000, 0.00000000000000e+000, 5.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 3.00000000000000e+000, 0.00000000000000e+000, 4.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 4.00000000000000e+000, 0.00000000000000e+000, 3.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 5.00000000000000e+000, 0.00000000000000e+000, 2.00000000000000e+000, 0.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 6.00000000000000e+000, 0.00000000000000e+000, 1.00000000000000e+000},
                  {0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 0.00000000000000e+000, 7.00000000000000e+000, 0.00000000000000e+000},});
      case CONDEX:
         return new Matrix(new double[][]{
{1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000},
{0.00000000000000e+000,1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,1.00000000000000e+000,-1.00000000000000e+000,-1.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,1.00000000000000e+000,-1.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,-1.00000000000000e+000},
 });
      case DORR:
         return new Matrix(new double[][]{
{4.28000000000000e+000,-6.40000000000000e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.64000000000000e+000,3.28000000000000e+000,-6.40000000000000e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{0.00000000000000e+000,-2.64000000000000e+000,2.28000000000000e+000,-6.40000000000000e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,-1.64000000000000e+000,1.28000000000000e+000,-1.64000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,-6.40000000000000e-001,2.28000000000000e+000,-2.64000000000000e+000,0.00000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,-6.40000000000000e-001,3.28000000000000e+000,-3.64000000000000e+000},
{0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,-6.40000000000000e-001,4.28000000000000e+000},
 });
      case FRANK:
         return new Matrix(new double[][]{
{1.00000000000000e+000,1.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,2.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,3.00000000000000e+000,3.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,3.00000000000000e+000,4.00000000000000e+000,4.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,3.00000000000000e+000,4.00000000000000e+000,5.00000000000000e+000,5.00000000000000e+000,0.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,3.00000000000000e+000,4.00000000000000e+000,5.00000000000000e+000,6.00000000000000e+000,6.00000000000000e+000},
{1.00000000000000e+000,2.00000000000000e+000,3.00000000000000e+000,4.00000000000000e+000,5.00000000000000e+000,6.00000000000000e+000,7.00000000000000e+000},
 });
      case KAHAN:
return new Matrix(new double[][]{
  {1.00000000000289e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,9.32039085969891e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,8.68696857773065e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,8.09659425301353e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,7.54634230702552e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,7.03348598623501e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,6.55548384977276e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,6.10996717541395e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,-2.21399398560436e-001,5.69472822146126e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,-2.21399398560436e-001,-2.06352893067962e-001,5.30770928636106e-001,0.00000000000000e+000,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,-2.21399398560436e-001,-2.06352893067962e-001,-1.92328961841756e-001,4.94699251183810e-001,0.00000000000000e+000,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,-2.21399398560436e-001,-2.06352893067962e-001,-1.92328961841756e-001,-1.79258109800016e-001,4.61079037901853e-001,0.00000000000000e+000},
{-3.62357754476674e-001,-3.37731590275575e-001,-3.14779042702705e-001,-2.93386371242268e-001,-2.73447565287885e-001,-2.54863818810883e-001,-2.37543040730613e-001,-2.21399398560436e-001,-2.06352893067962e-001,-1.92328961841756e-001,-1.79258109800016e-001,-1.67075564810220e-001,4.29743685044499e-001},
 });
      case PARTER:
         return new Matrix(new double[][]{
{2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001,1.53846153846154e-001,1.33333333333333e-001,1.17647058823529e-001,1.05263157894737e-001,9.52380952380952e-002},
{-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001,1.53846153846154e-001,1.33333333333333e-001,1.17647058823529e-001,1.05263157894737e-001},
{-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001,1.53846153846154e-001,1.33333333333333e-001,1.17647058823529e-001},
{-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001,1.53846153846154e-001,1.33333333333333e-001},
{-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001,1.53846153846154e-001},
{-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001,1.81818181818182e-001},
{-1.81818181818182e-001,-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001,2.22222222222222e-001},
{-1.53846153846154e-001,-1.81818181818182e-001,-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001,2.85714285714286e-001},
{-1.33333333333333e-001,-1.53846153846154e-001,-1.81818181818182e-001,-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001,4.00000000000000e-001},
{-1.17647058823529e-001,-1.33333333333333e-001,-1.53846153846154e-001,-1.81818181818182e-001,-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000,6.66666666666667e-001},
{-1.05263157894737e-001,-1.17647058823529e-001,-1.33333333333333e-001,-1.53846153846154e-001,-1.81818181818182e-001,-2.22222222222222e-001,-2.85714285714286e-001,-4.00000000000000e-001,-6.66666666666667e-001,-2.00000000000000e+000,2.00000000000000e+000},
 });
      case RANDSVD1:
         return new Matrix(new double[][]{
{2.39644157631515e-001,1.45517184185229e-001,1.20644133348297e-001,-4.05197414389678e-001,1.44887917509667e-001,1.53323632990269e-001},
{-2.16534365665987e-001,-1.31424721498458e-001,-1.09015706237138e-001,3.66487223007756e-001,-1.31187016391006e-001,-1.38520798543177e-001},
{-8.07904537440448e-002,-4.85970019871909e-002,-4.13714281741088e-002,1.47153993141200e-001,-6.17427271779560e-002,-5.36741002384892e-002},
{-5.74831669354156e-002,-3.46745721591069e-002,-2.93066917065158e-002,1.02665087421179e-001,-4.14765662490091e-002,-3.78153833911534e-002},
{1.10929459144583e-001,6.78439768472849e-002,5.47955773757206e-002,-1.72949011619485e-001,4.85749872518376e-002,6.79877197966013e-002},
{1.20396015224319e-001,7.28838469882398e-002,6.09155984518635e-002,-2.08258678602315e-001,7.84500598113792e-002,7.78674596307171e-002},
{-1.11145129839759e-001,-6.79026278251136e-002,-5.54042386162772e-002,1.79368588805256e-001,-5.68905353827868e-002,-6.95712554885433e-002},
{-2.00239556415752e-001,-1.22352621548204e-001,-1.00028876639031e-001,3.25351501915936e-001,-1.05659329827498e-001,-1.25907874187230e-001},
 });
      case RANDSVD2:
         return new Matrix(new double[][]{
{-1.99865512561414e-001,-1.87599285589644e-001,-7.22478971504638e-002,-2.31578301032180e-001,2.11369173330074e-001,-2.93266339719423e-001,1.04796952706810e-002,-2.42102611019528e-001,8.20705901602012e-003},
{-1.56829117986067e-001,-1.48746727415850e-001,-6.02169532974702e-002,-1.88679834275843e-001,1.64106931049415e-001,-2.29995626257654e-001,9.14958917609348e-003,-1.90394263876635e-001,6.41151412374491e-003},
{1.23611555682623e-002,9.83873283607500e-003,4.86139297009084e-004,6.44320774570365e-003,-1.50368636440104e-002,1.82543486239802e-002,3.90814744152966e-004,1.44794959745187e-002,-5.48747048502648e-004},
{1.84391515744311e-001,1.74045235705785e-001,6.89318943004025e-002,2.18135912266668e-001,-1.93863270911128e-001,2.70457202233585e-001,-1.02754707433466e-002,2.23612173870287e-001,-7.56436644247457e-003},
{-1.54612039279461e-001,-1.46321210285487e-001,-5.89571889569140e-002,-1.85129381428022e-001,1.61916314002940e-001,-2.26611553584651e-001,8.96205477417282e-003,-1.87544301883410e-001,6.38514227828179e-003},
 });
      default:
        return null;
    }
  }

  static public void main(String[] args) throws SparseSVDException {
    Matrix mat = exemple(NomMatrice.RANDSVD2);
    System.out.println("MAT :");
    mat.print(8, 2);
    SingularValueDecomposition svd = mat.svd();
    System.out.println("");
    Matrix U = svd.getU();
    Matrix V = svd.getV();
    Matrix S = svd.getS();
    Matrix mat1 = U.times(S).times(V.transpose());
    System.out.println("U*S*V' :");
    mat1.print(12, 6);
    double[] s = svd.getSingularValues();
    System.out.println("S :");
    for (double d : s) System.out.print(d+" ");
    System.out.println("");
    System.out.println("U :");
    U.print(12, 6);
    U.transpose().times(U).print(12, 6);
    System.out.println("V :");
    V.print(12, 6);
    V.transpose().times(V).print(12, 6);

    SparseMatrix spmat = new SparseMatrix(mat);
    System.out.println("SPMAT :");
    dumpSpMat(spmat.copy());
    int dim = Math.min(spmat.getColumnDimension(), spmat.getRowDimension());
    SparseSVD spsvd = spmat.svd(dim);
    double[] sps = spsvd.getSingularValues();
    System.out.println("SPS :");
    for (double d : sps) System.out.println(d);
    Matrix SPS = new Matrix(sps.length, sps.length);
    for (int i = 0; i<sps.length; i++)
      SPS.set(i, i, sps[i]);
    Matrix SPU = spsvd.getU();
    Matrix SPV = spsvd.getV();
    System.out.println("");
    System.out.println("SPU :");
    SPU.print(12, 6);
    SPU.transpose().times(SPU).print(12, 6);
    System.out.println("SPV :");
    SPV.print(12, 6);
    SPV.transpose().times(SPV).print(12, 6);
    Matrix mat2 = SPU.times(SPS).times(SPV.transpose());
    System.out.println("SPU*SPS*SPV' :");
    mat2.print(12, 6);

  }
}
